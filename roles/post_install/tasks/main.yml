---
# tasks file for post_install

# PiHole post-install steps
# https://docs.pi-hole.net/main/post-install/

# NOTE: PiHole now includes dnsmasq built into its FTLDNS engine,
# which means we don't want to configure dnsmasq separately,
# which used to be an old workaround for this.

# NOTE: For checking variables for being empty in Ansible
# https://stackoverflow.com/questions/36912726/ansible-how-to-test-that-a-registered-variable-is-not-empty
- name: Set static host IP address for PiHole host
  become: true
  ansible.builtin.shell: |
    echo "static ip_address=192.168.1.53/24" >> /etc/dhcpcd.conf
  when: lookup("env", "HOST_STATIC_ADDRESS") | length > 0

- name: Set static router IP address for PiHole host
  become: true
  ansible.builtin.shell: |
    echo "static routers=192.168.1.1" >> /etc/dhcpcd.conf
  when: lookup("env", "HOST_STATIC_ROUTER_ADDRESS") | length > 0

# WARNING
# If there is any issue with the dns service or pihole container,
# then this configuration line will break all DNS resolution 
# on the pihole host!
# If you have problems or the service does not start, then check 
# that DNS lookups still work and remove this line if not until 
# the service runs OK:
#   $ dig google.com [@127.0.0.1]   to test using pihole
#   $ dig google.com [@1.1.1.1]     to test using CloudFlare DNS
- name: Configure pihole host to use pihole for all DNS resolution
  become: true
  ansible.builtin.shell: |
    echo "static domain_name_servers=127.0.0.1" >> /etc/dhcpcd.conf

# NOTE: dnsmasq is now built into PiHole's FTL, and so during pihole 
# run it creates /etc/dnsmasq/ files. Therefore, we still apply
# dnsmasq changes for configurations such as DNSSEC as before but
# we don't otherwise configure dnsmasq outside of pihole.
# https://github.com/pi-hole/pi-hole/wiki/DNSCrypt-2.0#dnssec-validation
- name: IF DNSSEC is enabled in pihole, and dnscrypt is enabled, also enable DNSSEC in the dnscrypt "proxy-dnssec"
  ansible.builtin.shell: |
    touch /opt/dns/config/etc-dnsmasq.d/02-dnscrypt.conf
    echo "proxy-dnssec" >> /opt/dns/config/etc-dnsmasq.d/02-dnscrypt.conf
  ignore_errors: true
  when: lookup("env", "DNSSEC_ENABLED") == "true"

- name: Reboot pihole host
  ansible.builtin.reboot:

- name: Enable and start the dockerized dns service
  ansible.builtin.shell: | 
    sudo systemctl enable dns.service
    sudo systemctl start dns.service

# #########################

# - name: IF DNSSEC is enabled in pihole, also enable it via systemd
#   ansible.builtin.shell: |
#     sed -r -i.orig 's/#?DNSSEC=no/DNSSEC=yes/g' /etc/systemd/resolved.conf
#     sed -r -i.orig 's/#?DNS=/DNS=127.0.0.1/g' /etc/systemd/resolved.conf
#   when: lookup("env", "DNSCRYPT_ENABLED") == "true"

# # TODO
# # https://github.com/pi-hole/pi-hole/wiki/DNSCrypt-2.0#dnssec-validation
# # - name: IF DNSSEC is enabled in pihole, and dnscrypt is enabled, also enable DNSSEC in the dnscrypt "proxy-dnssec"
# #   ansible.builtin.shell: |
# #     echo "proxy-dnssec" >> /etc/dnsmasq.d/02-dnscrypt.conf
# #   when: TODO - how to check if file exists? Does NOT on raspbian.

# - name: IF DNSSEC is not enabled in pihole, disable it via systemd
#   ansible.builtin.shell: |
#     sed -r -i.orig 's/#?DNSSEC=yes/DNSSEC=no/g' /etc/systemd/resolved.conf
#   when: lookup("env", "DNSCRYPT_ENABLED") == "false"

# - name: Disable SystemD DNSStubListener
#   become: true 
#   ansible.builtin.shell: |
#     sed -r -i.orig 's/#?DNSStubListener=yes/DNSStubListener=no/g' /etc/systemd/resolved.conf
#     sh -c 'rm /etc/resolv.conf && ln -s /run/systemd/resolve/resolv.conf /etc/resolv.conf'
#     systemctl restart systemd-resolved
